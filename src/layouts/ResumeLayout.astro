---
import { ViewTransitions } from 'astro:transitions';
import '../styles/global.css';

interface Props {
  title: string;
  description?: string;
  image?: string;
}

const { 
  title = "马晓川的个人简历",
  description = "高级前端开发工程师，7年Web前端开发经验",
  image = "/images/profile.jpg"
} = Astro.props;
---

<!DOCTYPE html>
<html lang="zh" class="scroll-smooth dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta property="og:image" content={image} />
    <meta name="twitter:card" content="summary_large_image" />
    <ViewTransitions />
  </head>
  <body class="min-h-screen">
    <!-- 背景层 -->
    <div class="fixed inset-0 w-full min-h-screen -z-10">
      <!-- 亮色背景 -->
      <div class="absolute inset-0 w-full min-h-full bg-gray-50"></div>
      <!-- 暗色背景和动画 -->
      <div id="theme-circle" class="absolute inset-0 w-full min-h-full bg-gray-900 transition-[clip-path] duration-700 ease-in-out dark:clip-path-circle-full"></div>
    </div>

    <div class="relative min-h-screen">
      <!-- 顶部导航栏 -->
      <nav id="header" class="fixed top-0 left-0 right-0 z-50 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-700 no-print transition-transform duration-300">
        <div class="container mx-auto px-4 h-12 flex items-center justify-between">
          <div class="flex items-center space-x-4">
            <button class="text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white"
              onclick="window.print()">
              <span class="sr-only">打印</span>
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
              </svg>
            </button>
          </div>
          
          <div class="flex items-center space-x-4">
            <button class="text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white p-2 rounded-lg transition-colors"
              id="theme-toggle"
              type="button">
              <span class="sr-only">切换主题</span>
              <!-- 暗色模式图标 -->
              <svg class="w-5 h-5 hidden dark:block" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
              </svg>
              <!-- 亮色模式图标 -->
              <svg class="w-5 h-5 block dark:hidden" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"></path>
              </svg>
            </button>
          </div>
        </div>
      </nav>

      <!-- 回到顶部按钮 -->
      <button id="back-to-top" class="fixed bottom-6 right-6 p-2 bg-gray-800/80 dark:bg-gray-700/80 text-white rounded-full shadow-lg backdrop-blur-sm opacity-0 invisible transition-all duration-300 hover:bg-gray-700 dark:hover:bg-gray-600 z-50">
        <span class="sr-only">回到顶部</span>
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18" />
        </svg>
      </button>

      <!-- 主要内容 -->
      <main class="container mx-auto px-4 py-16 print:py-0">
        <slot />
      </main>
    </div>

    <script>
      // 主题切换
      const themeToggle = document.getElementById('theme-toggle');
      const themeCircle = document.getElementById('theme-circle');
      let isAnimating = false;

      if (themeToggle && themeCircle) {
        themeToggle.addEventListener('click', () => {
          const isDark = document.documentElement.classList.toggle('dark');
          localStorage.setItem('theme', isDark ? 'dark' : 'light');
        });
      }

      // 初始化主题
      const initTheme = () => {
        const isDark = localStorage.theme === 'dark' || 
          (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches);

        if (isDark) {
          document.documentElement.classList.add('dark');
          if (themeCircle) {
            themeCircle.style.clipPath = 'circle(150% at 50% 50%)';
          }
        } else {
          document.documentElement.classList.remove('dark');
          if (themeCircle) {
            themeCircle.style.clipPath = 'circle(0% at 50% 50%)';
          }
        }
      };

      initTheme();

      // 滚动行为控制
      const header = document.getElementById('header');
      const backToTop = document.getElementById('back-to-top');
      let lastScrollTop = 0;
      let scrollTimer: NodeJS.Timeout | null = null;
      const SCROLL_THRESHOLD = 100;
      const SCROLL_TIMEOUT = 150;

      function updateHeaderVisibility(scrollTop: number, force = false) {
        if (!header) return;

        // 在顶部时始终显示
        if (scrollTop <= 0) {
          header.style.transform = 'translateY(0)';
          return;
        }

        // 向下滚动时隐藏
        if (scrollTop > lastScrollTop && scrollTop > SCROLL_THRESHOLD) {
          header.style.transform = 'translateY(-100%)';
        }
        // 向上滚动时显示
        else if (scrollTop < lastScrollTop || force) {
          header.style.transform = 'translateY(0)';
        }

        lastScrollTop = scrollTop;
      }

      function updateBackToTopVisibility(scrollTop: number) {
        if (!backToTop) return;

        if (scrollTop > SCROLL_THRESHOLD) {
          backToTop.classList.remove('opacity-0', 'invisible');
        } else {
          backToTop.classList.add('opacity-0', 'invisible');
        }
      }

      // 节流函数
      function throttleScroll(callback: () => void) {
        if (scrollTimer) return;
        
        scrollTimer = setTimeout(() => {
          callback();
          scrollTimer = null;
        }, SCROLL_TIMEOUT);
      }

      // 监听滚动事件
      window.addEventListener('scroll', () => {
        const scrollTop = document.documentElement.scrollTop;
        
        throttleScroll(() => {
          updateHeaderVisibility(scrollTop);
          updateBackToTopVisibility(scrollTop);
        });
      }, { passive: true });

      // 回到顶部功能
      if (backToTop) {
        backToTop.addEventListener('click', () => {
          window.scrollTo({
            top: 0,
            behavior: 'smooth'
          });
          // 强制显示 header
          updateHeaderVisibility(0, true);
        });
      }

      // 监听滚动结束
      let scrollEndTimer: NodeJS.Timeout | null = null;
      window.addEventListener('scroll', () => {
        if (scrollEndTimer) {
          clearTimeout(scrollEndTimer);
        }
        
        scrollEndTimer = setTimeout(() => {
          const scrollTop = document.documentElement.scrollTop;
          // 如果用户停止滚动且方向是向上，显示 header
          if (scrollTop < lastScrollTop) {
            updateHeaderVisibility(scrollTop, true);
          }
        }, 150);
      }, { passive: true });
    </script>

    <style is:global>
      ::selection {
        @apply bg-blue-500/20;
      }

      /* 平滑滚动 */
      html {
        scroll-behavior: smooth;
      }

      /* 打印样式 */
      @media print {
        nav {
          display: none !important;
        }

        main {
          padding-top: 0 !important;
        }

        @page {
          margin: 1.5cm;
        }
      }
    </style>

    <style>
      #theme-circle {
        will-change: clip-path;
      }

      .dark #theme-circle {
        clip-path: circle(150% at 50% 50%);
      }

      @media (prefers-reduced-motion: reduce) {
        #theme-circle {
          transition: none !important;
        }
      }
    </style>
  </body>
</html> 
